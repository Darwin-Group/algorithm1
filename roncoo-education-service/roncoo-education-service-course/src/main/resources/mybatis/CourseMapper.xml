<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.roncoo.education.course.dao.impl.mapper.CourseMapper">
    <resultMap id="BaseResultMap" type="com.roncoo.education.course.dao.impl.mapper.entity.Course">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
        <result column="status_id" jdbcType="TINYINT" property="statusId"/>
        <result column="sort" jdbcType="INTEGER" property="sort"/>
        <result column="lecturer_id" jdbcType="BIGINT" property="lecturerId"/>
        <result column="category_id" jdbcType="BIGINT" property="categoryId"/>
        <result column="course_name" jdbcType="VARCHAR" property="courseName"/>
        <result column="course_logo" jdbcType="VARCHAR" property="courseLogo"/>
        <result column="is_free" jdbcType="TINYINT" property="isFree"/>
        <result column="ruling_price" jdbcType="DECIMAL" property="rulingPrice"/>
        <result column="course_price" jdbcType="DECIMAL" property="coursePrice"/>
        <result column="is_putaway" jdbcType="TINYINT" property="isPutaway"/>
        <result column="course_sort" jdbcType="INTEGER" property="courseSort"/>
        <result column="count_buy" jdbcType="INTEGER" property="countBuy"/>
        <result column="count_study" jdbcType="INTEGER" property="countStudy"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.roncoo.education.course.dao.impl.mapper.entity.Course">
        <result column="introduce" jdbcType="LONGVARCHAR" property="introduce"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, gmt_create, gmt_modified, status_id, sort, lecturer_id, category_id, course_name,
    course_logo, is_free, ruling_price, course_price, is_putaway, course_sort, count_buy,
    count_study
    </sql>
    <sql id="Blob_Column_List">
        introduce
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.roncoo.education.course.dao.impl.mapper.entity.CourseExample" resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from course
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.roncoo.education.course.dao.impl.mapper.entity.CourseExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from course
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limitStart >= 0">
            limit ${limitStart} , ${pageSize}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from course
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from course
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.roncoo.education.course.dao.impl.mapper.entity.CourseExample">
        delete from course
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.roncoo.education.course.dao.impl.mapper.entity.Course">
        insert into course (id, gmt_create, gmt_modified,
                            status_id, sort, lecturer_id,
                            category_id, course_name, course_logo,
                            is_free, ruling_price, course_price,
                            is_putaway, course_sort, count_buy,
                            count_study, introduce)
        values (#{id,jdbcType=BIGINT}, #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP},
                #{statusId,jdbcType=TINYINT}, #{sort,jdbcType=INTEGER}, #{lecturerId,jdbcType=BIGINT},
                #{categoryId,jdbcType=BIGINT}, #{courseName,jdbcType=VARCHAR}, #{courseLogo,jdbcType=VARCHAR},
                #{isFree,jdbcType=TINYINT}, #{rulingPrice,jdbcType=DECIMAL}, #{coursePrice,jdbcType=DECIMAL},
                #{isPutaway,jdbcType=TINYINT}, #{courseSort,jdbcType=INTEGER}, #{countBuy,jdbcType=INTEGER},
                #{countStudy,jdbcType=INTEGER}, #{introduce,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.roncoo.education.course.dao.impl.mapper.entity.Course">
        insert into course
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="gmtCreate != null">
                gmt_create,
            </if>
            <if test="gmtModified != null">
                gmt_modified,
            </if>
            <if test="statusId != null">
                status_id,
            </if>
            <if test="sort != null">
                sort,
            </if>
            <if test="lecturerId != null">
                lecturer_id,
            </if>
            <if test="categoryId != null">
                category_id,
            </if>
            <if test="courseName != null">
                course_name,
            </if>
            <if test="courseLogo != null">
                course_logo,
            </if>
            <if test="isFree != null">
                is_free,
            </if>
            <if test="rulingPrice != null">
                ruling_price,
            </if>
            <if test="coursePrice != null">
                course_price,
            </if>
            <if test="isPutaway != null">
                is_putaway,
            </if>
            <if test="courseSort != null">
                course_sort,
            </if>
            <if test="countBuy != null">
                count_buy,
            </if>
            <if test="countStudy != null">
                count_study,
            </if>
            <if test="introduce != null">
                introduce,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="gmtCreate != null">
                #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null">
                #{gmtModified,jdbcType=TIMESTAMP},
            </if>
            <if test="statusId != null">
                #{statusId,jdbcType=TINYINT},
            </if>
            <if test="sort != null">
                #{sort,jdbcType=INTEGER},
            </if>
            <if test="lecturerId != null">
                #{lecturerId,jdbcType=BIGINT},
            </if>
            <if test="categoryId != null">
                #{categoryId,jdbcType=BIGINT},
            </if>
            <if test="courseName != null">
                #{courseName,jdbcType=VARCHAR},
            </if>
            <if test="courseLogo != null">
                #{courseLogo,jdbcType=VARCHAR},
            </if>
            <if test="isFree != null">
                #{isFree,jdbcType=TINYINT},
            </if>
            <if test="rulingPrice != null">
                #{rulingPrice,jdbcType=DECIMAL},
            </if>
            <if test="coursePrice != null">
                #{coursePrice,jdbcType=DECIMAL},
            </if>
            <if test="isPutaway != null">
                #{isPutaway,jdbcType=TINYINT},
            </if>
            <if test="courseSort != null">
                #{courseSort,jdbcType=INTEGER},
            </if>
            <if test="countBuy != null">
                #{countBuy,jdbcType=INTEGER},
            </if>
            <if test="countStudy != null">
                #{countStudy,jdbcType=INTEGER},
            </if>
            <if test="introduce != null">
                #{introduce,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.roncoo.education.course.dao.impl.mapper.entity.CourseExample" resultType="java.lang.Integer">
        select count(*) from course
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update course
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.gmtCreate != null">
                gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.gmtModified != null">
                gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
            </if>
            <if test="record.statusId != null">
                status_id = #{record.statusId,jdbcType=TINYINT},
            </if>
            <if test="record.sort != null">
                sort = #{record.sort,jdbcType=INTEGER},
            </if>
            <if test="record.lecturerId != null">
                lecturer_id = #{record.lecturerId,jdbcType=BIGINT},
            </if>
            <if test="record.categoryId != null">
                category_id = #{record.categoryId,jdbcType=BIGINT},
            </if>
            <if test="record.courseName != null">
                course_name = #{record.courseName,jdbcType=VARCHAR},
            </if>
            <if test="record.courseLogo != null">
                course_logo = #{record.courseLogo,jdbcType=VARCHAR},
            </if>
            <if test="record.isFree != null">
                is_free = #{record.isFree,jdbcType=TINYINT},
            </if>
            <if test="record.rulingPrice != null">
                ruling_price = #{record.rulingPrice,jdbcType=DECIMAL},
            </if>
            <if test="record.coursePrice != null">
                course_price = #{record.coursePrice,jdbcType=DECIMAL},
            </if>
            <if test="record.isPutaway != null">
                is_putaway = #{record.isPutaway,jdbcType=TINYINT},
            </if>
            <if test="record.courseSort != null">
                course_sort = #{record.courseSort,jdbcType=INTEGER},
            </if>
            <if test="record.countBuy != null">
                count_buy = #{record.countBuy,jdbcType=INTEGER},
            </if>
            <if test="record.countStudy != null">
                count_study = #{record.countStudy,jdbcType=INTEGER},
            </if>
            <if test="record.introduce != null">
                introduce = #{record.introduce,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update course
        set id = #{record.id,jdbcType=BIGINT},
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
        status_id = #{record.statusId,jdbcType=TINYINT},
        sort = #{record.sort,jdbcType=INTEGER},
        lecturer_id = #{record.lecturerId,jdbcType=BIGINT},
        category_id = #{record.categoryId,jdbcType=BIGINT},
        course_name = #{record.courseName,jdbcType=VARCHAR},
        course_logo = #{record.courseLogo,jdbcType=VARCHAR},
        is_free = #{record.isFree,jdbcType=TINYINT},
        ruling_price = #{record.rulingPrice,jdbcType=DECIMAL},
        course_price = #{record.coursePrice,jdbcType=DECIMAL},
        is_putaway = #{record.isPutaway,jdbcType=TINYINT},
        course_sort = #{record.courseSort,jdbcType=INTEGER},
        count_buy = #{record.countBuy,jdbcType=INTEGER},
        count_study = #{record.countStudy,jdbcType=INTEGER},
        introduce = #{record.introduce,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update course
        set id = #{record.id,jdbcType=BIGINT},
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
        status_id = #{record.statusId,jdbcType=TINYINT},
        sort = #{record.sort,jdbcType=INTEGER},
        lecturer_id = #{record.lecturerId,jdbcType=BIGINT},
        category_id = #{record.categoryId,jdbcType=BIGINT},
        course_name = #{record.courseName,jdbcType=VARCHAR},
        course_logo = #{record.courseLogo,jdbcType=VARCHAR},
        is_free = #{record.isFree,jdbcType=TINYINT},
        ruling_price = #{record.rulingPrice,jdbcType=DECIMAL},
        course_price = #{record.coursePrice,jdbcType=DECIMAL},
        is_putaway = #{record.isPutaway,jdbcType=TINYINT},
        course_sort = #{record.courseSort,jdbcType=INTEGER},
        count_buy = #{record.countBuy,jdbcType=INTEGER},
        count_study = #{record.countStudy,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.roncoo.education.course.dao.impl.mapper.entity.Course">
        update course
        <set>
            <if test="gmtCreate != null">
                gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null">
                gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
            </if>
            <if test="statusId != null">
                status_id = #{statusId,jdbcType=TINYINT},
            </if>
            <if test="sort != null">
                sort = #{sort,jdbcType=INTEGER},
            </if>
            <if test="lecturerId != null">
                lecturer_id = #{lecturerId,jdbcType=BIGINT},
            </if>
            <if test="categoryId != null">
                category_id = #{categoryId,jdbcType=BIGINT},
            </if>
            <if test="courseName != null">
                course_name = #{courseName,jdbcType=VARCHAR},
            </if>
            <if test="courseLogo != null">
                course_logo = #{courseLogo,jdbcType=VARCHAR},
            </if>
            <if test="isFree != null">
                is_free = #{isFree,jdbcType=TINYINT},
            </if>
            <if test="rulingPrice != null">
                ruling_price = #{rulingPrice,jdbcType=DECIMAL},
            </if>
            <if test="coursePrice != null">
                course_price = #{coursePrice,jdbcType=DECIMAL},
            </if>
            <if test="isPutaway != null">
                is_putaway = #{isPutaway,jdbcType=TINYINT},
            </if>
            <if test="courseSort != null">
                course_sort = #{courseSort,jdbcType=INTEGER},
            </if>
            <if test="countBuy != null">
                count_buy = #{countBuy,jdbcType=INTEGER},
            </if>
            <if test="countStudy != null">
                count_study = #{countStudy,jdbcType=INTEGER},
            </if>
            <if test="introduce != null">
                introduce = #{introduce,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.roncoo.education.course.dao.impl.mapper.entity.Course">
        update course
        set gmt_create   = #{gmtCreate,jdbcType=TIMESTAMP},
            gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
            status_id    = #{statusId,jdbcType=TINYINT},
            sort         = #{sort,jdbcType=INTEGER},
            lecturer_id  = #{lecturerId,jdbcType=BIGINT},
            category_id  = #{categoryId,jdbcType=BIGINT},
            course_name  = #{courseName,jdbcType=VARCHAR},
            course_logo  = #{courseLogo,jdbcType=VARCHAR},
            is_free      = #{isFree,jdbcType=TINYINT},
            ruling_price = #{rulingPrice,jdbcType=DECIMAL},
            course_price = #{coursePrice,jdbcType=DECIMAL},
            is_putaway   = #{isPutaway,jdbcType=TINYINT},
            course_sort  = #{courseSort,jdbcType=INTEGER},
            count_buy    = #{countBuy,jdbcType=INTEGER},
            count_study  = #{countStudy,jdbcType=INTEGER},
            introduce    = #{introduce,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.roncoo.education.course.dao.impl.mapper.entity.Course">
        update course
        set gmt_create   = #{gmtCreate,jdbcType=TIMESTAMP},
            gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
            status_id    = #{statusId,jdbcType=TINYINT},
            sort         = #{sort,jdbcType=INTEGER},
            lecturer_id  = #{lecturerId,jdbcType=BIGINT},
            category_id  = #{categoryId,jdbcType=BIGINT},
            course_name  = #{courseName,jdbcType=VARCHAR},
            course_logo  = #{courseLogo,jdbcType=VARCHAR},
            is_free      = #{isFree,jdbcType=TINYINT},
            ruling_price = #{rulingPrice,jdbcType=DECIMAL},
            course_price = #{coursePrice,jdbcType=DECIMAL},
            is_putaway   = #{isPutaway,jdbcType=TINYINT},
            course_sort  = #{courseSort,jdbcType=INTEGER},
            count_buy    = #{countBuy,jdbcType=INTEGER},
            count_study  = #{countStudy,jdbcType=INTEGER}
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>
